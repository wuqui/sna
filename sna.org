#+TITLE: SNA
#+AUTHOR: QW

* motivation
- The *time pressure* for my PhD will ease.
- I will treat myself to a *new Macbook*
- It will boost my *PhD progress*.
  - will boost me to about 40% of my diss
  - I can then fully focus on *SocEmb* til the end of the year.
  - I can then work on the NeoCorpus paper at the start of the next year.
- This is a proof of concept for my *career in knowledge work*.
  - I can be successful.
  - I can work from home.
  - I can balance work and life.
  - I can optimize my setup (chairs, desk, keyboard, Emacs).
* agenda
** DONE consolidate current version
:CLOCKBOOK:
CLOCK: [2020-06-15 Mo 16:59]--[2020-06-15 Mon 19:50] =>  2:51
:END:
** DONE read and indent
:CLOCKBOOK:
CLOCK: [2020-06-15 Mon 22:25]--[2020-06-15 Mon 23:23] =>  0:58
:END:
** DONE send mail to Schmid
- Hast Du nächste Woche Zeit für Korrekturlesen?
- Dann würde ich dir Anfang der Woche das Paper schicken.
** DONE read cite:Laitinen2020SizeMatters
:CLOCKBOOK:
CLOCK: [2020-07-09 Thu 16:22]--[2020-07-09 Thu 17:39] =>  1:17
CLOCK: [2020-07-08 Wed 17:37]--[2020-07-08 Wed 19:00] =>  1:23
:END:
** DONE get document running again
:CLOCKBOOK:
CLOCK: [2020-09-23 Wed 15:45]--[2020-09-23 Wed 15:49] =>  0:04
:END:
** DONE read existing stuff again
:CLOCKBOOK:
CLOCK: [2020-09-23 Wed 18:18]--[2020-09-23 Wed 19:12] =>  0:54
CLOCK: [2020-09-23 Wed 17:13]--[2020-09-23 Wed 18:02] =>  0:49
CLOCK: [2020-09-23 Wed 16:18]--[2020-09-23 Wed 16:51] =>  0:33
:END:
** DONE establish motivation and strategy
:CLOCKBOOK:
CLOCK: [2020-09-25 Fri 14:46]--[2020-09-25 Fri 14:54] =>  0:08
:END:
** DONE try =GAM= smoothing for usage frequency plots
:CLOCKBOOK:
CLOCK: [2020-10-28 Wed 11:05]--[2020-10-28 Wed 12:09] =>  1:04
:END:
** DONE check correlation measures
:CLOCKBOOK:
CLOCK: [2020-10-28 Wed 13:00]--[2020-10-28 Wed 13:48] =>  0:48
:END:
** WAIT ask Stefano
*** TODO correlation
Which coefficient to use?
- Pearson: linear?
- Spearman: rank?
*** TODO smoothing function for time-series trajectories
- GAMs applicable?
** TODO write remaining parts
*** DONE write data
:CLOCKBOOK:
CLOCK: [2020-06-16 Di 19:10]--[2020-06-16 Di 20:23] =>  1:13
CLOCK: [2020-06-16 Tue 08:29]--[2020-06-16 Di 13:40]  =>  5:11
:END:
*** DONE write method
:CLOCKBOOK:
CLOCK: [2020-06-21 So 18:45]--[2020-06-21 So 19:50] =>  1:05
CLOCK: [2020-06-21 So 17:25]--[2020-06-21 So 18:35] =>  1:10
CLOCK: [2020-06-21 So 15:34]--[2020-06-21 So 16:58] =>  1:24
CLOCK: [2020-06-21 So 14:13]--[2020-06-21 So 15:15] =>  1:02
CLOCK: [2020-06-20 Sat 12:29]--[2020-06-20 Sa 13:00] =>  0:31
CLOCK: [2020-06-20 Sat 11:09]--[2020-06-20 Sat 12:16] =>  1:07
CLOCK: [2020-06-20 Sat 10:00]--[2020-06-20 Sat 10:56] =>  0:56
CLOCK: [2020-06-16 Di 21:00]--[2020-06-16 Di 21:32] =>  0:32
:END:
*** TODO results
:CLOCKBOOK:
CLOCK: [2020-10-27 Tue 18:20]--[2020-10-27 Tue 22:12] =>  3:52
CLOCK: [2020-09-30 Wed 16:56]--[2020-09-30 Wed 17:49] =>  0:53
CLOCK: [2020-09-25 Fri 15:15]--[2020-09-25 Fri 19:28] =>  4:13
CLOCK: [2020-07-01 Mi 11:50]--[2020-07-01 Mi 12:42] =>  0:52
CLOCK: [2020-06-29 Mo 14:36]--[2020-06-29 Mo 15:30] =>  0:54
CLOCK: [2020-06-23 Tue 21:50]--[2020-06-23 Tue 23:47] =>  1:57
CLOCK: [2020-06-23 Tue 16:35]--[2020-06-23 Tue 20:30] =>  3:55
CLOCK: [2020-06-22 Mo 16:24]--[2020-06-22 Mon 17:30] =>  1:06
:END:
**** TODO frequency
***** DONE total counts
:CLOCKBOOK:
CLOCK: [2020-10-20 Tue 20:39]--[2020-10-21 Wed 09:21] => 12:42
:END:
***** DONE cumulative counts
:CLOCKBOOK:
CLOCK: [2020-10-27 Tue 18:20]--[2020-10-27 Tue 19:04] =>  0:44
CLOCK: [2020-10-26 Mon 11:37]--[2020-10-26 Mon 19:01] =>  7:24
:END:
***** TODO absolute counts
**** TODO sna
*** TODO discussion
*** TODO conclusion
*** TODO theoretical framework
** TODO edit text
** TODO misc
*** DONE check research topic style
:CLOCKBOOK:
CLOCK: [2020-06-22 Mo 15:20]--[2020-06-22 Mo 15:47] =>  0:27
:END:
*** DONE scale UI plots to full time range
*** TODO re-calculate =age= with diffusion offsets
*** TODO put list of lexemes in Appendix
* track writing
** data
#+NAME: tbl-write
|------------------------+------------------------+----------+----------+---------+-------+--------|
| t_start                | t_end                  |    dur_d |  dur_hms | w_start | w_end | w_diff |
|------------------------+------------------------+----------+----------+---------+-------+--------|
| [2020-06-21 Sun 14:14] | [2020-06-21 Sun 15:14] | 0.041666 | 00:59:59 |    5668 |  5775 |    107 |
| [2020-06-21 Sun 15:34] | [2020-06-21 Sun 16:55] |  0.05625 | 01:21:00 |    5775 |  6008 |    233 |
| [2020-06-21 Sun 17:27] | [2020-06-21 Sun 18:36] | 0.047917 | 01:09:00 |    6008 |  6214 |    206 |
| [2020-06-21 Sun 18:47] | [2020-06-21 Sun 19:48] | 0.042361 | 01:00:59 |    6214 |  6233 |     19 |
| [2020-06-22 Mon 16:22] | [2020-06-22 Mon 17:29] | 0.046528 | 01:07:00 |    6241 |  6379 |    138 |
| [2020-06-22 Mon 17:55] | [2020-06-22 Mon 18:56] | 0.042361 | 01:00:59 |    6381 |  6421 |     40 |
| [2020-06-23 Tue 16:34] | [2020-06-23 Tue 17:33] | 0.040972 | 00:58:59 |    6421 |  6755 |    334 |
| [2020-06-23 Tue 17:44] | [2020-06-23 Tue 19:11] | 0.060417 | 01:27:00 |    6755 |  6768 |     13 |
| [2020-06-23 Tue 19:20] | [2020-06-23 Tue 20:30] | 0.048611 | 01:09:59 |    6768 |  6761 |     -7 |
| [2020-06-23 Tue 21:49] | [2020-06-23 Tue 22:54] | 0.045139 | 01:05:00 |    6761 |  6770 |      9 |
| [2020-06-23 Tue 23:05] | [2020-06-23 Tue 23:45] | 0.027777 | 00:39:59 |    6770 |  6812 |     42 |
| [2020-06-29 Mon 14:36] | [2020-06-29 Mon 15:44] | 0.047223 | 01:08:00 |    6812 |  6892 |     80 |
| [2020-06-29 Mon 16:00] | [2020-06-29 Mon 16:48] | 0.033333 | 00:47:59 |    6892 |  6896 |      4 |
| [2020-07-01 Wed 11:50] | [2020-07-01 Wed 12:41] | 0.035416 | 00:50:59 |    6943 |  7036 |     93 |
| [2020-07-07 Tue 13:54] | [2020-07-07 Tue 15:22] | 0.061111 | 01:27:59 |    7098 |  7226 |    128 |
| [2020-09-25 Fri 15:56] | [2020-09-25 Fri 16:35] | 0.027083 | 00:38:59 |    7284 |  7310 |     26 |
| [2020-09-25 Fri 16:47] | [2020-09-25 Fri 17:47] | 0.041666 | 00:59:59 |    7310 |  7479 |    169 |
| [2020-09-25 Fri 18:00] | [2020-09-25 Fri 19:00] | 0.041667 | 01:00:00 |    7479 |  7559 |     80 |
| [2020-10-20 Tue 21:03] | [2020-10-20 Tue 21:54] | 0.035417 | 00:51:00 |    7555 |  7672 |    117 |
| [2020-10-20 Tue 22:04] | [2020-10-20 Tue 22:46] | 0.029167 | 00:42:00 |    7672 |  7736 |     64 |
| [2020-10-20 Tue 22:55] | [2020-10-20 Tue 23:52] | 0.039583 | 00:56:59 |    7736 |  7737 |      1 |
| [2020-10-21 Wed 00:05] | [2020-10-21 Wed 00:31] | 0.018056 | 00:26:00 |    7737 |  7539 |   -198 |
| [2020-10-26 Mon 12:41] | [2020-10-26 Mon 13:41] | 0.041667 | 01:00:00 |    7540 |  7565 |     25 |
| [2020-10-26 Mon 14:16] | [2020-10-26 Mon 15:49] | 0.064584 | 01:33:00 |    7565 |  7633 |     68 |
| [2020-10-26 Mon 16:15] | [2020-10-26 Mon 17:46] | 0.063195 | 01:31:00 |    7633 |  7766 |    133 |
| [2020-10-26 Mon 17:57] | [2020-10-26 Mon 18:55] | 0.040277 | 00:57:59 |    7766 |  7735 |    -31 |
| [2020-10-27 Tue 18:20] | [2020-10-27 Tue 19:05] |  0.03125 | 00:45:00 |    7735 |  7777 |     42 |
| [2020-10-27 Tue 19:28] | [2020-10-27 Tue 20:14] | 0.031945 | 00:46:00 |    7777 |  7890 |    113 |
|------------------------+------------------------+----------+----------+---------+-------+--------|
|                        |                        |        0 | 24:52:48 |         |       |   1502 |
|------------------------+------------------------+----------+----------+---------+-------+--------|
#+TBLFM: @>$4=vsum(@5..@-1); T::@>$7=vsum(@5..@-1)::$3=date(<$2>)-date(<$1>)::$4=$3 * 24 * 60 * 60; T::$7=$6 - $5

** analysis
*** process data
#+name: analyze-data
#+BEGIN_SRC jupyter-python :var data=tbl-write
import pandas as pd

df = pd.DataFrame(
    columns=data[0],
    data=data[1:-1]
)

df['t_start'] = df['t_start'].str[1:-1]
df['t_end'] = df['t_end'].str[1:-1]

df['t_start'] = pd.to_datetime(df['t_start'])
df['t_end'] = pd.to_datetime(df['t_end'])
df['dur_hms'] = pd.to_timedelta(df['dur_hms'])

df['date'] = df['t_start'].dt.date

df_dur = (df
          .groupby('date')
          .agg(time_day_td = ('dur_hms', sum))
          .reset_index()
          )

df_dur['date'] = pd.to_datetime(df_dur['date'])
df_dur['time_day_td'] = pd.to_timedelta(df_dur['time_day_td'])
#+END_SRC

#+RESULTS: analyze-data

*** make plot
#+name: make-plot
#+BEGIN_SRC jupyter-python :noweb yes :var data=tbl-write :results silent
<<analyze-data>>

import altair as alt
from altair_saver import save

df_dur['time_day_ts'] = df_dur['date'] + df_dur['time_day_td']

df_dur.drop(columns='time_day_td', inplace=True)

chart = (alt.Chart(df_dur)
         .mark_rule()
         .encode(
             x=alt.X('date:T', title=''),
             y=alt.Y('hoursminutes(time_day_ts):T', title='hours / day')
         )
         )

chart.save('out/track-writing.png', scale_factor=2.0)
chart.save('out/track-writing.html')
#+END_SRC
